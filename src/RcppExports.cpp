// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// simul_entropy_balancer
List simul_entropy_balancer(NumericMatrix incidence, NumericMatrix sub_weights, NumericMatrix sub_controls, NumericVector parent_controls, NumericVector parent_weights, NumericVector weights_lb, NumericVector weights_ub, NumericVector controls_importance, int master_control_index, int max_iterations, double max_delta, int print_every_n);
RcppExport SEXP _rentropy_simul_entropy_balancer(SEXP incidenceSEXP, SEXP sub_weightsSEXP, SEXP sub_controlsSEXP, SEXP parent_controlsSEXP, SEXP parent_weightsSEXP, SEXP weights_lbSEXP, SEXP weights_ubSEXP, SEXP controls_importanceSEXP, SEXP master_control_indexSEXP, SEXP max_iterationsSEXP, SEXP max_deltaSEXP, SEXP print_every_nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type incidence(incidenceSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sub_weights(sub_weightsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sub_controls(sub_controlsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parent_controls(parent_controlsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parent_weights(parent_weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights_lb(weights_lbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights_ub(weights_ubSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type controls_importance(controls_importanceSEXP);
    Rcpp::traits::input_parameter< int >::type master_control_index(master_control_indexSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type max_delta(max_deltaSEXP);
    Rcpp::traits::input_parameter< int >::type print_every_n(print_every_nSEXP);
    rcpp_result_gen = Rcpp::wrap(simul_entropy_balancer(incidence, sub_weights, sub_controls, parent_controls, parent_weights, weights_lb, weights_ub, controls_importance, master_control_index, max_iterations, max_delta, print_every_n));
    return rcpp_result_gen;
END_RCPP
}
// entropy_balancer
List entropy_balancer(const NumericMatrix& incidence, const NumericVector& initial_weights, const NumericVector& control_totals, const NumericVector& weights_lb, const NumericVector& weights_ub, const NumericVector& controls_importance, int master_control_index, int max_iterations, double max_delta, int print_every_n);
RcppExport SEXP _rentropy_entropy_balancer(SEXP incidenceSEXP, SEXP initial_weightsSEXP, SEXP control_totalsSEXP, SEXP weights_lbSEXP, SEXP weights_ubSEXP, SEXP controls_importanceSEXP, SEXP master_control_indexSEXP, SEXP max_iterationsSEXP, SEXP max_deltaSEXP, SEXP print_every_nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type incidence(incidenceSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type initial_weights(initial_weightsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type control_totals(control_totalsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights_lb(weights_lbSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights_ub(weights_ubSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type controls_importance(controls_importanceSEXP);
    Rcpp::traits::input_parameter< int >::type master_control_index(master_control_indexSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type max_delta(max_deltaSEXP);
    Rcpp::traits::input_parameter< int >::type print_every_n(print_every_nSEXP);
    rcpp_result_gen = Rcpp::wrap(entropy_balancer(incidence, initial_weights, control_totals, weights_lb, weights_ub, controls_importance, master_control_index, max_iterations, max_delta, print_every_n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rentropy_simul_entropy_balancer", (DL_FUNC) &_rentropy_simul_entropy_balancer, 12},
    {"_rentropy_entropy_balancer", (DL_FUNC) &_rentropy_entropy_balancer, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_rentropy(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
